using System;
using System.Text;
namespace Singly_Linked_List_CSharp 
{
Class Node 
{
public int rollNumber ;
public string name ;
public Node next;
}
class List 
{
Node START;
public List()
{
START=null;
}
public void addNode()
{
int rollNo;
string nm;
Console.Write("\nEnter the roll number of the student:");
rollNo=Convert.ToInt32(Console.ReadLine());
Console.Write("\nEnter the name of the student :");
nm=Console.Readline();
Node newnode=new Node();
newnode.rollNumber=rollNo;
newnode.name=nm;
if((START!=null)&&(rollNo==START.rollNumber)
{
Console.WriteLine("\nDuplicate roll numbers not allowed\n");
return;
}
newnode.next=START;
START=newnode;
return ;
}
Node previous,current;
previous=START;
current=START;
while((current !=null)&&(rollNo>=current.rollNumber))
{
if(rollNo==current.rollNumber)
{
Console.WriteLine("\n Duplicate roll numbers not allowed\n");
return;
}
previous =current ;
current=current.next;
}
newnode.next=current ;
previous.next=newnode;
}
public bool delNode(int rollNo)
{
Node previous,current ;
previous=current=null;
if(Search(rollNo,ref previous,ref current)==false)
return false;
previous.next=current.next;
if(current==START)
START=START.next;
return true ;
}
public bool Search(int rollNo,ref Node previous,ref Node current )
{
previous=START;
current=START;
while((current!=null)&&(rollNo!=current.rollNumbet))
{previous=current;
current=current.next;
}
if(current==null)
return(false);
else
return(true);
}
public void transverse ()
{
if ( listEmpty ())
Console.WriteLine("\n List is empty .\n");
else
{
Console.WriteLine("\n The records in the list are :\n);
Node current Node;
for(current Node=START; currentNode!=null;
currentNode=currentNode.next)
Console.Write(currentNode.rollNumber+""+current Node.name+"\n");
Console.WriteLine();
}
}
public bool listEmpty ()
{
if(START==null)
return true;
else
return false;
}
static void Main(string [] args)
{
List obj=new List();
while( true) {
try 
{
Console.WriteLine("\nMenu");
Console.WriteLine("1.Add a record to the list");
Console.WriteLine("2.Delete a record from the list ");
Console.WriteLine("3.View all the records in the list");
Console.WriteLine("4.Search for a record in the list");
Console.WriteLine("5.Exit ");
Console.Write("\nEnter your choice (1-5):");
char ch = Convert.ToChar(Console.ReadLine());
switch(ch)
{
case'1':
{
obj.addNode();
}
break ;
case'2':
{
if(obj.listEmpty()(
{
Cnsole.WriteLine("\nList is empty");
 break;
}
Console .Write("\nEnter the roll number of the student whose record is to be f
deleted:");
int rollNo=
Convert.ToInt32(Console.ReadLine());
Console.WriteLine();
if(obj.delNode(rollNo==false )
Console.WriteLine("\nRecord not found ");
else
Console.WriteLine("Record with roll number"+rollNo+"deleted");
}
break;
case'3':
{
obj.transverse();
}
break;
case'4':
{ if (obj.listEmpty()==true)
{
Console.WriteLine("\nList is empty");
break;
}
Node previous, current;
previous=current=null;
Console.Write("\nEnter the roll number of the student whose record is to be searched:");
int num=
Convert ToInt32(Console.ReadLine());
if(obj.Search(num,ref previous,ref current ) == false)
Console.WriteLine("\nRecord not found.");
else
{
Console 
.WriteLine("\nRecord found");
Console.WriteLine("\nRoll number : "+current.rollNumber);
Console.WriteLine("\nName:"+current.name);
}
}
break;
case'5':
return ;
default :
{
Console.WriteLine("\nInvalid option ");
break;
}
}
}
catch(Exception e)
{
Console.WriteLine("\nCheck for the value entered .");
}
}
}
}
}
